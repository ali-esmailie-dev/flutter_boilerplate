// Mocks generated by Mockito 5.4.4 from annotations
// in personal_portfolio/test/features/authentication_feature/presentation/bloc/authentication_blocs_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:personal_portfolio/core/resources/data_state.dart' as _i3;
import 'package:personal_portfolio/features/authentication_feature/data/models/verify_otp_model.dart'
    as _i6;
import 'package:personal_portfolio/features/authentication_feature/domain/repositories/authentication_repository.dart'
    as _i2;
import 'package:personal_portfolio/features/authentication_feature/domain/usecases/use_cases.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAuthenticationRepository_0 extends _i1.SmartFake
    implements _i2.AuthenticationRepository {
  _FakeAuthenticationRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDataState_1<T> extends _i1.SmartFake implements _i3.DataState<T> {
  _FakeDataState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LoginUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginUseCase extends _i1.Mock implements _i4.LoginUseCase {
  MockLoginUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AuthenticationRepository get authenticationRepository =>
      (super.noSuchMethod(
        Invocation.getter(#authenticationRepository),
        returnValue: _FakeAuthenticationRepository_0(
          this,
          Invocation.getter(#authenticationRepository),
        ),
      ) as _i2.AuthenticationRepository);

  @override
  _i5.Future<_i3.DataState<bool>> call(String? params) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i5.Future<_i3.DataState<bool>>.value(_FakeDataState_1<bool>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.DataState<bool>>);
}

/// A class which mocks [VerifyOtpUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockVerifyOtpUseCase extends _i1.Mock implements _i4.VerifyOtpUseCase {
  MockVerifyOtpUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AuthenticationRepository get authenticationRepository =>
      (super.noSuchMethod(
        Invocation.getter(#authenticationRepository),
        returnValue: _FakeAuthenticationRepository_0(
          this,
          Invocation.getter(#authenticationRepository),
        ),
      ) as _i2.AuthenticationRepository);

  @override
  _i5.Future<_i3.DataState<bool>> call(_i6.VerifyOtpModel? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i5.Future<_i3.DataState<bool>>.value(_FakeDataState_1<bool>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.DataState<bool>>);
}
